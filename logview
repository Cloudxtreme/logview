#!/usr/bin/perl -w
#
# Author:
#  Maciej Korzen
#  maciek@korzen.org, mkorzen@gmail.com
#  http://www.korzen.org
#
# This program is a very simple logfile colorizer. It removes a few
# columns (month, day, hostname, ...) from original file to make it more
# readable.
# Run "./logview -h" for usage.
# It requires following Perl modules:
#  File::Tail
#  Term::ANSIColor
#  Term::ReadKey

use strict;
use File::Tail;
use Term::ANSIColor qw(:constants);
use Term::ReadKey;

my $name = "logview";

sub usage
{
  print STDERR "Usage: $name logfile filter\n";
  print STDERR "       filters: none, syslog, ipmon, syslog:ipmon\n";
}

sub die_usage
{
  usage();
  exit(1);
}

sub filter_syslog
{
  my @fields;
  my $process;
  my $pid;

  @fields = split(/ +/, $_[0]);
  splice(@fields, 0, 2);
  splice(@fields, 1, 1);
  if ($fields[1] =~ /^(\/usr\/sbin\/cron|ipmon)/)
  {
    return "";
  }
  $fields[1] =~ s/(\]){0,1}:$//;
  ($process, $pid) = split(/\[/, $fields[1]);
  $process = BOLD . "$process" . RESET;
  if (defined($pid))
  {
    $pid = BOLD . MAGENTA . "$pid" . RESET;
    $fields[1] = "$process $pid";
  } else {
    $fields[1] = "$process";
  }
  return join(" ", @fields);
}

sub filter_ipmon_parse_hostname
{
  my $in = $_[0];
  my @h;

  if ($in =~ /\[.*\]/)
  {
    @h = (split(/\[|\],/, $in))[0,2];
  } else {
    @h = split(/,/, $in);
  }
  return @h;
}

sub filter_ipmon
{
  my @fields;
  my $host;
  my $port;

  @fields = split(/ +/, $_[0]);
  shift(@fields);
  $fields[0] =~ s/\.[0-9]+//;
  if ($fields[1] =~ /^[0-9]x$/)
  {
    splice(@fields, 1, 1);
  }
  splice(@fields, 1, 3);
  ($host, $port) = filter_ipmon_parse_hostname($fields[1]);
  $fields[1] = GREEN . BOLD . "$host " . BLUE "$port" . RESET;
  $fields[2] = ">";
  ($host, $port) = filter_ipmon_parse_hostname($fields[3]);
  $fields[3] = GREEN . BOLD . "\n         $host " . BLUE "$port" . RESET;
  splice(@fields, 4, 1);
  if (defined($fields[9]))
  {
    splice(@fields, 5, 5);
  } else {
    splice(@fields, 5, 4);
  }
  $fields[4] = "$fields[4]\n";
  return join(" ", @fields);
}

sub filter_none
{
  return $_[0];
}

sub filter_syslog_ipmon
{
  my $out;
  my @fields;

  @fields = split(/ +/, $_[0]);
  splice(@fields, 0, 4);
  if (!($fields[0] =~ /^ipmon/))
  {
    return "";
  }
  shift(@fields);
  unshift(@fields, "12/34/5678");
  $out = join(" ", @fields);
  chomp($out);
  return filter_ipmon($out);
}

sub check_file
{
  my $f = $_[0];

  if (! -e $f)
  {
    print STDERR "$f doesn't exist\n";
    return 0;
  }

  if (! -r $f) {
    print STDERR "You must be able to read $f\n";
    return 0;
  }
  return 1;
}

sub check_filter
{
  if ($_[0] =~ /^(none|syslog|ipmon|syslog:ipmon)$/)
  {
    return 1;
  }
  usage();
  return 0;
}

sub filter_function
{
  my $filter = $_[0];

  if ("$filter" eq "none")
  {
    return \&filter_none;
  }

  if ("$filter" eq "ipmon")
  {
    return \&filter_ipmon;
  }

  if ("$filter" eq "syslog")
  {
    return \&filter_syslog;
  }

  if ("$filter" eq "syslog:ipmon")
  {
    return \&filter_syslog_ipmon;
  }
}

sub showlog
{
  my $logfile = $_[0];
  my $filter = $_[1];
  my $funkcja;
  my @files;
  my $line;
  my @pending;
  my $c;
  my $t1;
  my $t2;
  
  check_file($logfile) or exit 1;
  check_filter($filter) or exit 1;

  $funkcja = filter_function($filter);
  
  push(@files, File::Tail->new(name=>"$logfile", maxinterval=>0.5, interval=>0.5, tail=>100));

  ReadMode(3);
  while(1)
  {
    ($t1, $t2, @pending) = File::Tail::select(undef, undef, undef, 0.5, @files);
    foreach (@pending)
    {
      $line = $_->read;
      print &$funkcja($line);
    }
    $c = ReadKey(-1);
    if (defined($c) && "$c" eq "q")
    {
      ReadMode(0);
      return(0);
    }
  }
}

sub ask_for_input {
  my $i;
  print "$name> ";
  $i = <STDIN>;
  chomp($i);
  return $i;
}

sub validate {
  my $input = $_[0];
  my $max = $_[1];
  my $allowed = $_[2];

  if ($input =~ /^[0-9]+$/ || $input =~ /^[$allowed]$/ ) {
    if ($input =~ /^[0-9]+$/)
    {
      if ($input < 0 || $input > $max) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

sub interact
{
  my $conf = $_[0];
  my @files;
  my @filters;
  my @tmp;
  my @f;
  my $i;
  my $s = 0;
  my $ret;

  check_file($conf) or exit 1;

  open(CONF, $conf);
  @tmp = <CONF>;
  close(CONF);
  chomp(@tmp);
  foreach $i (@tmp)
  {
    @f = split(/ +/, $i);
    if (defined($f[0]) && defined($f[1]))
    {
      push(@files, $f[0]);
      push(@filters, $f[1]);
    } else {
      die "Syntax error in line:\n$i\n";
    }
  }
  while (defined($files[$s]))
  {
    printf "%3i) $files[$s]\t\[$filters[$s]\]\n", $s;
    $s++;
  }
  print "  q) quit\n";
  $ret = ask_for_input();
  if (validate($ret, --$s, "q") == 0)
  {
    if ($ret =~ /^q$/)
    {
      exit;
    }
    system("clear");
    showlog($files[$ret], $filters[$ret]);
    system("clear");
  }
}

if (!defined($ARGV[0]))
{
  die_usage();
}

if (!defined($ARGV[1]))
{
  die_usage();
}

if ("$ARGV[0]" eq "-p")
{
  while (1) {
    interact($ARGV[1]);
  }
} else {
  showlog($ARGV[0], $ARGV[1]);
}
